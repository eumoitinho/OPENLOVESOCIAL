const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configurar Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://jgvbwevezjgzsamqnitp.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpndmJ3ZXZlempnenNhbXFuaXRwIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjE3MzQwMiwiZXhwIjoyMDY3NzQ5NDAyfQ.27t6k7ofO6nqUSnlOVNtJkGPACFp09X0YLGqFh5zkQs';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function runMigration() {
  try {
    console.log('üîÑ Iniciando migra√ß√£o do sistema de notifica√ß√µes...');
    
    // Ler o arquivo de migra√ß√£o
    const migrationPath = path.join(__dirname, '..', 'supabase', 'migrations', '20250117_fix_notifications_schema.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    // Executar migra√ß√£o
    const { data, error } = await supabase.rpc('exec_sql', {
      sql: migrationSQL
    });
    
    if (error) {
      console.error('‚ùå Erro ao executar migra√ß√£o:', error);
      
      // Tentar executar partes da migra√ß√£o manualmente
      console.log('üîÑ Tentando executar migra√ß√£o em partes...');
      
      // 1. Adicionar coluna sender_id
      console.log('üìù Adicionando coluna sender_id...');
      const { error: senderError } = await supabase
        .from('notifications')
        .select('sender_id')
        .limit(1);
      
      if (senderError && senderError.code === 'PGRST116') {
        // Coluna n√£o existe, criar
        await supabase.rpc('exec_sql', {
          sql: 'ALTER TABLE notifications ADD COLUMN IF NOT EXISTS sender_id UUID REFERENCES auth.users(id) ON DELETE SET NULL;'
        });
        console.log('‚úÖ Coluna sender_id adicionada');
      } else {
        console.log('‚úÖ Coluna sender_id j√° existe');
      }
      
      // 2. Adicionar coluna content
      console.log('üìù Adicionando coluna content...');
      const { error: contentError } = await supabase
        .from('notifications')
        .select('content')
        .limit(1);
      
      if (contentError && contentError.code === 'PGRST116') {
        // Coluna n√£o existe, criar
        await supabase.rpc('exec_sql', {
          sql: 'ALTER TABLE notifications ADD COLUMN IF NOT EXISTS content TEXT;'
        });
        console.log('‚úÖ Coluna content adicionada');
      } else {
        console.log('‚úÖ Coluna content j√° existe');
      }
      
      // 3. Atualizar dados
      console.log('üìù Atualizando dados existentes...');
      const { error: updateError } = await supabase
        .from('notifications')
        .update({ content: supabase.raw('message') })
        .is('content', null);
      
      if (updateError) {
        console.log('‚ö†Ô∏è  Erro ao atualizar dados:', updateError.message);
      } else {
        console.log('‚úÖ Dados atualizados');
      }
      
    } else {
      console.log('‚úÖ Migra√ß√£o executada com sucesso');
    }
    
    // Verificar se as tabelas existem
    console.log('üîç Verificando estrutura das tabelas...');
    
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .in('table_name', ['notifications', 'notification_settings']);
    
    if (tablesError) {
      console.error('‚ùå Erro ao verificar tabelas:', tablesError);
    } else {
      console.log('‚úÖ Tabelas encontradas:', tables?.map(t => t.table_name));
    }
    
    // Testar cria√ß√£o de notifica√ß√£o
    console.log('üß™ Testando cria√ß√£o de notifica√ß√£o...');
    
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id')
      .limit(1);
    
    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersError);
    } else if (users && users.length > 0) {
      const testUserId = users[0].id;
      
      const { data: testNotification, error: testError } = await supabase
        .from('notifications')
        .insert({
          user_id: testUserId,
          type: 'system',
          title: 'Teste de Migra√ß√£o',
          message: 'Sistema de notifica√ß√µes funcionando!',
          content: 'Sistema de notifica√ß√µes funcionando!',
          data: { test: true }
        })
        .select('id')
        .single();
      
      if (testError) {
        console.error('‚ùå Erro ao criar notifica√ß√£o de teste:', testError);
      } else {
        console.log('‚úÖ Notifica√ß√£o de teste criada:', testNotification.id);
        
        // Remover notifica√ß√£o de teste
        await supabase
          .from('notifications')
          .delete()
          .eq('id', testNotification.id);
        
        console.log('‚úÖ Notifica√ß√£o de teste removida');
      }
    }
    
    console.log('üéâ Migra√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('üí• Erro durante a migra√ß√£o:', error);
  }
}

// Executar migra√ß√£o
runMigration();